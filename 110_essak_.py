# -*- coding: utf-8 -*-
"""110_Essak .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12brTGNf-CsolaIBXxOjPUD79pSEvzFLk
"""

# Python Data Types
# 1)Numbers 2)String 3)List 4)TUple 5)Dictionary

# Numbers
a=25
print("a as int:",a)
b=548468
print("b as long",b)
c=14.25
print("c as float",c)
d=3.14j
print("d as complex",d)

#string
str1 = "Welcome to Python"
print(str1)

#List
# Represents with sqaure bracket []
# Array is static and list is dynamic
# Can have dissimilar data types
l1=[15,25.6,"Python"]
print(l1)

#tuple
#Represented by ()
#Set of values separated by commas
#list [] and tuple()
#List allows updates in size and elements where as tuple does not allow
#tuple is read only entity
t1=(21,"Python",21.45)
print(t1)

#Dictonary
#Array,Tuple,List we have to remember the index numbers of an element
#Dictionary creates its own index numbers for our elements
d1={"Aradhana":21,"Prarthana":22,"Rugved":23}
print(d1)

#Decision Making Statement
#1)if statement 2)if-else Statement 3)Nested if statement
# if statement
n1 = int(input())
n2 = int(input())
n3 = int(input())
if n1>n2 and n1>n3:
  print(n1,"is largest")
if n2>n1 and n2>n3:
  print(n2, "is largest")
if n3>n1 and n3>n2:
  print(n3, "is largest")

v

#if-else statement
print("Enter a Number")
num = int(input())
if num%2==0:
  print(num," is even")
else:
  print(num, "is odd)

#Nested if statement
n1=int(input())
n2=int(input())
n3=int(input())

if n1>n2:
  if n1>n3:
    print(n1,"is largest")
if n2>n3:
  if n2>n1:
    print(n2,"is largest")
if n3>n2:
  if n3>n1:
   print(n3,"is largest")
print("main area ends")

#Short hand if-else
print("Enter any number")
num=int(input())
print(num,"is even") if num%2==0 else print(num,"is odd")

#elif
weather = input("What is the Wheather today?") #input
if weather == "Sunny" :
  print("It is a great day to go for a picnic! ")
elif weather == "Cloudy":
  print("Don't forgert to bring jacket in case it rains.")
elif weather=="Rainy":
  print("Remember to bring umbrella")
else:
  print("Sorry! I don't understand the weather condition")

#loop manipulation
i=1
while i<10:
  print("Welcome")
  i=i+1

print("Enter a value")
num =int(input())
sum=0
i=1
while i<=num:
  sum=sum+i
  i=i+1
  print("sum",sum)

#for loop
l1=["C++","java","Python"]
for i in l1:
  print("loop refers to book",i)

#Function: Block of instructions that can perform an action and once defined it can be reused.
#Function is defined by using keyword def
#def followed by name of your choosing
#followed by ()
#followed by:

# some user defoned functions
#1)
def sayHello():
  print("Welcome to Python")
sayHello()

#2)
def even():
  print("Enter a number:")
  num = int(input())
  if num%2==0:
    print("Number is even:",num)
  else:
    print("Number is odd:",num)
even()

#3)
def Sum():
  a=5
  b=7
  sum=a+b
  print("Sum =",sum)
Sum()

#4)
def Loopoffruits():
  fruits = ["Apple","Banana","Cherry"]
  for i in fruits:
    print(i,"it is an fruit name")
Loopoffruits()

#Datatypes and object related functions
#type() return the type of parameter
a=10
b=True
c=16.55
d=[10,20,30]
print(type(a))
print(type(b))
print(type(c))
print(type(d))
print(abs(15))

#all() This function takes swquence (List,Tuple,String) as a parameter
#returns true if all values in parameter are true
l1=["","",""]
l2=["a","",""]
l3=[True,True]
l4 = [True,False]
l5 = [False,False]
a=all(l1)
b=all(l2)
c=all(l3)
d=all(l4)
e=all(l5)
print(a)
print(b)
print(c)
print(d)
print(e)

#any() This functions takes sequence(List,Tuple,String) as a parameter
# returns true if any values in parameter are true
l1=

def Bill():
  p1 = int(input()) #p:product
  p2 = int(input())
  p3 = int(input())
  p4 = int(input())
  sum = p1+p2+p3+p4
  print("The Total price of all products = ",sum)
Bill()

def Marksheet():
  print("Enter marks (0-300)")
  physics = int(input())
  chemistry = int(input())
  math = int(input())
  Total_Marks = physics + chemistry + math
  if (Total_Marks>=30 and Total_Marks<=300 ):
    print("Pass")
  else:
    print("fail")

# basic list operations append(), insert(), extend() functions
# append() : appends and adds the specified element to list adds the spe
l1 = [10,20,"Python",94.2,314]
l1.append(21)
print(l1)

l1 =["Python", "Java", "Essentials of data science"]
print(l1)
l1.insert(2,"Hadoop")
print(l1)

#extend() This function adds the elements of parameter list with invoking list
# list1.extends (list2)
l1=[10, 20, 30]
l2=[15,35,45,55]
l1.extend(l2)
print (l1)

l1= [485,21.344, "Python", 25678]
a = l1.__len__()      #Function returns the length of list
print(a)

#Statistics, in general, is the method of collection of data, tabulation, and interpretation
import statistics
l1= [1,2,3,3,2,2,2,1]
print(statistics.mean(l1))

#It is the middle value of the data set. It splits the data into two halves.
import statistics
t1= (21,23,45,67)
print(statistics.median(t1))

#The median_low() function returns the median of data in case of odd number of elements,
#but in case of even number of elements, returns the lower of two middle elements.
#The statistics.median_low() method calculates the low median of the given data set.
#This method also sorts the data in ascending order before calculating the low median.
import statistics
set1 = [1, 2, 8, 4, 5]
#1,1,2,4,5,8
print("Low Median of the set is", (statistics.median_low (set1)))

#median_high()
#function returns the median of data in case of odd number of elements,
#but in case of even number of elements, returns the higher of two middle elements.
#median_high() method calculates the high median of the given data set.
#This method also sorts the data in ascending order before calculating the high median.
import statistics
set1= [1, 3, 3, 4, 5]
#1,3,3,4,5
print("Median of the set is", (statistics.median_high(set1)))

#Mode
#It is the value that has the highest frequency in the given data set.
#The data set may have no mode if the frequency of all data points is the same.
from statistics import mode
t1 = (6, 6, 6,6,3, 3,3,3,3,3,3,3,3,3,3,3,3,4, 5, 5, 5, 5,7)
print("Mode of data set is ", (mode (t1)))

#The difference between the largest and smallest data point in our data set is known as th
#Range = Largest data value - smallest data value
arr = [1, 2, 3, 4, 5]
Maximum = max(arr)
Minimum= min (arr)
Range = Maximum-Minimum
print("Maximum ={}, Minimum = {} and Range = {}".format (Maximum, Minimum, Range))

#It is defined as an average squared deviation from the mean.
from statistics import variance
t1=(1, 2, 5, 4, 8, 9, 12)
print("Variance of Samplel is s", (variance(t1)))



#standard deviation
#It is defined as the square root of the variance.
#It is calculated by finding the Mean, then subtracting each number from the Mean which is
from statistics import stdev
s1=(1, 2, 5, 4, 8, 9, 12)
print("The Standard Deviation of Samplel is s", (stdev(s1)))

import pandas as pd
df = pd.read_excel('/content/sample_data/Copy of EDS_Excel_Employee_(116)(1).xlsx')
#df.set_index("date",inplace=True)
display(df)
df1 = pd.read_excel(r'/content/sample_data/Copy of (116)_Salary_emp(1).xlsx')
print(df1)

#sort the record in ascending order
import pandas as pa
df1.sort_values(by=['Salary'])

#sort record in descending order
df1.sort_values(by=['Salary'],ascending=False)

#display dataset
display(df,df1)

#merge data sets
import pandas as pd
a = pd.merge(df,df1)
display(a)

#function to find first 5 emp having high salary
 def sal():
  import pandas as pd
  a = df1.sort_values(by=['Salary'], ascending=False)
  g = a.nlargest(3,'Salary','first')
  f = a.nlargest(2,['Salary']) # g or f (both are same)
  print(g)
  print(f)
sal() #function call

#Tuple operations
t1 = (10,20,30,"Python",15.71) #declaring tuple
t2 = (80.87,21,"Durwa")
print(t1)
print(t2)

#Accessing tuple elements using indexing
print(t1[0])

# Navigate tuple index
print(t1[-1])
print(t2[-2])

#iterating throgh tuple
for i in t1:
  print(i)

#slicing tuple
st1 = t1[1:4]
print(st1)

#tuples are immutable
str2 = t1 + (50,60)
print(str2)

#finding length of tuple
str3 = t1.__len__()
print(str3)

#Membership operators
print(10 in t1)
print(10 not in t1)

#concatinate tuple
t3 = t1 + t2
print(t3)

#Multiplying tuple
t4 = t1*3
print(t4)

#deleting tuple
del t1

import csv

def calculate_grade(marks):
    if marks >= 90:
        return 'A+'
    elif marks >= 80:
        return 'A'
    elif marks >= 70:
        return 'B'
    elif marks >= 60:
        return 'C'
    elif marks >= 50:
        return 'D'
    else:
        return 'F'

def process_student_records(input_file, output_file):
    with open(input_file, 'r') as file:
        csv_reader = csv.reader(file)
        next(csv_reader)  # skip header row
        records = []
        for row in csv_reader:
            name = row[0]
            marks = int(row[1])
            grade = calculate_grade(marks)
            records.append([name, marks, grade])

    with open(output_file, 'w') as file:
        csv_writer = csv.writer(file)
        csv_writer.writerow(['Name', 'Marks', 'Grade'])
        for row in records:
            csv_writer.writerow(row)

if _name_ == '_main_':
    input_file = 'student_records.csv'
    output_file = 'student_grades.csv'
    process_student_records(input_file, output_file)

import csv

def calculate_grade(marks):
    if marks >= 90:
        return 'A+'
    elif marks >= 80:
        return 'A'
    elif marks >= 70:
        return 'B'
    elif marks >= 60:
        return 'C'
    elif marks >= 50:
        return 'D'
    else:
        return 'F'

def process_student_records(input_file, output_file):
    with open(input_file, 'r') as file:
        csv_reader = csv.reader(file)
        next(csv_reader)  # skip header row
        records = []
        for row in csv_reader:
            name = row[0]
            marks = int(row[1])
            grade = calculate_grade(marks)
            records.append([name, marks, grade])

    with open(output_file, 'w') as file:
        csv_writer = csv.writer(file)
        csv_writer.writerow(['Name', 'Marks', 'Grade'])
        for row in records:
            csv_writer.writerow(row)

if _name_ == '_main_':
    input_file = 'student_records.csv'
    output_file = 'student_grades.csv'
    process_student_records(input_file, output_file)

def calculate_average_age(student_data):
    total_age = 0
    for student in student_data:
        total_age += student[1]
    average_age = total_age / len(student_data)
    return average_age

def get_students_above_average_age(student_data, average_age):
    students_above_average = []
    for student in student_data:
        if student[1] > average_age:
            students_above_average.append(student[0])
    return students_above_average

def process_student_data(input_file):
    with open(input_file, 'r') as file:
        lines = file.readlines()
        student_data = []
        for line in lines:
            name, age = line.strip().split(',')
            age = int(age)
            student_data.append((name, age))

    average_age = calculate_average_age(student_data)
    students_above_average = get_students_above_average_age(student_data, average_age)

    print("Average Age of Students: ", average_age)
    print("Students Above Average Age: ", students_above_average)

if _name_ == '_main_':
    input_file = 'student_data.txt'
    process_student_data(input_file)

# Import required libraries
import random

# Define the products available in the store
products = {
    'apple': 1.50,
    'banana': 0.99,
    'bread': 2.49,
    'milk': 1.89,
    'eggs': 2.99,
    'chicken': 5.99
}

# Define the cart class
class ShoppingCart:
    def _init_(self):
        self.items = {}

    # Add item to cart
    def add_item(self, item, quantity):
        if item in self.items:
            self.items[item] += quantity
        else:
            self.items[item] = quantity

    # Remove item from cart
    def remove_item(self, item, quantity):
        if item in self.items:
            if quantity >= self.items[item]:
                del self.items[item]
            else:
                self.items[item] -= quantity

    # Calculate total cost of items in cart
    def calculate_total(self):
        total = 0
        for item, quantity in self.items.items():
            total += products[item] * quantity
        return total

# Define the main function
def main():
    cart = ShoppingCart()

    # Display available products
    print("Available products:")
    for product, price in products.items():
        print(f"{product.capitalize()}: ${price:.2f}")

    # Prompt user to add items to cart
    while True:
        item = input("Enter the name of the item you want to add to the cart (or 'done' to finish): ")
        if item.lower() == 'done':
            break
        elif item.lower() not in products:
            print("Invalid item name. Please try again.")
        else:
            quantity = int(input("Enter the quantity: "))
            cart.add_item(item.lower(), quantity)

    # Display cart contents
    print("\nCart contents:")
    for item, quantity in cart.items.items():
        print(f"{item.capitalize()}: {quantity}")

    # Prompt user to remove items from cart
    while True:
        item = input("Enter the name of the item you want to remove from the cart (or 'done' to finish): ")
        if item.lower() == 'done':
            break
        elif item.lower() not in products:
            print("Invalid item name. Please try again.")
        elif item.lower() not in cart.items:
            print("Item not found in cart. Please try again.")
        else:
            quantity = int(input("Enter the quantity: "))
            cart.remove_item(item.lower(), quantity)

    # Display cart total
    print(f"\nTotal: ${cart.calculate_total():.2f}")

main()

# Tuple operations

t1 = (10, 20, 30, "Python", 15.71) # declearing tuple
t2 = (80.87,21, "Durwa")
print(t1)
print (t2)

# Accessing Tuple elements using Indexing
print(t1[0])

# Navigate tuple Index
print(t1[-1])
print(t2[-2])

#iterating through tuple

for i in t1:
  print(i)

#slicing tuple
stl = t1[1:4]
print(stl)

#tuples are immutable
str2 = t1 + (50,60)
print(str2)


#finding length of tuple
str3 = t1. __len__()
print(str3)


#Membership operators
print (10 in t1)
print(10 not in t1)

#concatinate tuple
t3 = t1+t2
print(t3)

#Multiplying tuple
t4 = t1*3
print(t4)

#deleting tuple
del t1

# Dictionary operations
dict1 = {"ABC":2742023,"EDF":89}

print (dict1)                    #print dictionary
print (dict1.keys())             #reteriving keys from dictionary
print(dict1.values())            #reterving values from dictionary
dict1.update({"SCE":8-9-2022})   #update dictionary
print(dict1)
a = dict1.__len__()              #finding length of dictionary
print (a)
dict1.pop("SCE")                 #pop an element from dictionary
print (dict1)

#set theory
#set is mutable
s1 = (10,20,30)
for i in s1:
  print(s1)

a = (10,20,30)
print(a)

s1 = {10,20,30}
for i in s1:
  print(i)

#we can add single element with add
s1 = {10,20,30}
s1.add(50)
print(s1)

#we can add multiple elements with add
s1 = {10,20,30}
s1.update((7,8,1))
print

Maths = "completed topics in mathematics"
print(Maths)
#we can update the list everytime when new topic is teached by teacher by this the student can no what is happening with syllabus ..
ctomaths=['reduction formula','Beta function','Gamma function']
print(ctomaths)
Physics = "Completed topics in Physics"
print(Physics)
ctop = {1:"Units",2:"Optics",3:"polaraization",4:"Quantum mechanics"}
print(ctop)
Chemistry = "Completed topics in Chemistry"
print(Chemistry)
ctoc = ['chapter1','chapter2']
print(ctoc)
#This following file have the schedule to improve the score of student
import pandas as pd
df = pd.read_excel('/content/sample_data/Book1essakkkkk.xlsx')
#df.set_index("date",inplace=True)
display(df)
df1 = pd.read_excel(r'/content/sample_data/Book1essakkkkk.xlsx')
print(df1)

"""# New Section"""

# dictionary operations:
Physics = {1:"units",2:"polarization",3:"Optics",4:"Quantum Mechanics"}
print(Physics)
Physics1 = (Physics.keys())
print(Physics1)

import pandas as pd
df = pd.read_excel('/content/851_emp.csv')
df = a
print(a.values.tolist())   #converts data frame to list

import pandas as pd
df = pd.read_csv("/content/851_emp.csv")
a = df
print (a.values.tolist())                   # Convert the data frame into list
df1 = pd.read_csv(r"/content/sal info.csv")
#print(df1)
l = list(df1.itertuples (index=False))
t1 = [tuple(x) for x in df1.values]
#print(tl)
d1 = df.to_dict()
#print(d1)
def freq(l):
  counter = 0                               # counter initialization
  num = l[0]                                # Index 0 of list 1 for i in 1:
  for i in l:
    cf = l.count(i)
    if(cf>counter): counter = cf
    num = i
    return 0
print(freq(l))



#module is A file containing a set of functions you want to include in your application.
#from math Library
import math
#Return the value of 9 raised to the power of 3
print(math.pow(9, 3))



#itertools in python
#Python's Itertool is a module that provides
#various functions that work
# on iterators to produce complex iterators.
from itertools import count

for number in count(start=5, step=3):
    if number > 10:
        break
    print(number)



x = range(3, 18)
for n in x:
  print(n)

array = np.random.randint(0,30, (20,20))

print("Goodbye!")

# aaradhana wants to buy vegetables, grocery and some daily needs but she is having the budge of  ₹500. now if the price of the vegetable  is greater than ₹500 she will not able to purchase daily needs and groceries but if the price of each item is ₹166 then she will able to buy all three things (vegetables, groceries, and some daily needs )


budget = 500
vegetable_price = float(input("Enter the price of vegetables: "))
grocery_price = float(input("Enter the price of groceries: "))
daily_needs_price = float(input("Enter the price of daily needs: "))

total_price = vegetable_price + grocery_price + daily_needs_price

if total_price > budget:
    print("Sorry, you cannot buy all three items.")
elif vegetable_price == budget:
  print("Sorry, you can buy only vegetables ...and \n\"due to budget is over you cannot buy groceries and daily needs\" ")

elif total_price <= budget:
    print("You can buy all three items.")

# create a calculator
num1 = float(input("enter a number"))
num2 = float(input("enter a numner"))

addition = num1 + num2
substraction = num1-num2
multiplication = num1*num2
division = num1/num2
floor_division = num1//num2
exponential = num1**num2
modulus = num1 % num2

print(" for addition enter = 1 \n for substraction enter = 2 \n for (muliplcation enter = 3 \n for division enter = 4\n for floor_division enter = 5\n for exponential enter =6\n for modulus enter = 7\n")

choice = int(input("enter (1-6)"))

if  choice == 1:
  print(addition)
elif choice == 2:
  print(substraction)
elif choice == 3:
  print(multiplication)
elif choice == 4:
  print(division)
elif choice == 5:
  print(floor_division)
elif choice == 6:
  print(exponential)
elif choice == 7:
  print(modulus)

print("He said, \"I want to eat an apple.\" ")

import pandas as pd

# Read the CSV file into a DataFrame
data = pd.read_csv("/content/company1.csv")

# 1. Lowest salary in rupees
lowest_salary = data['salary Rs'].min()
print("Lowest salary in rupees:", lowest_salary)

# 2. Highest salary in rupees
highest_salary = data['salary Rs'].max()
print("Highest salary in rupees:", highest_salary)

# 3. How many employees have job location as Canada
canada_employees = data[data['company_location'] == 'Canada']
num_canada_employees = len(canada_employees)
print("Number of employees with job location as Canada:", num_canada_employees)

# 4. Job location wise count
location_counts = data['company_location'].value_counts()
print("Job location wise count:")
print(location_counts)

# 5. How many employees are working in large scale company
large_scale_employees = data[data['salary Rs'] > 60000]
num_large_scale_employees = len(large_scale_employees)
print("Number of employees working in large scale company:", num_large_scale_employees)

#Python data frames
#Import excel sheet
import pandas as pd
df = pd.read_excel('/content/ESSakk.Book1.xlsx')
b = pd.DataFrame(df)
display(b)

#select one column
a = df['Roll. No.']
print(a)

#Get frequency of key value
X= df['Sr.no.'].value_counts()
print(X)

#sort values
s = df.sort_values(by = 'Roll. No.',ascending = True)
print(s)



import pandas as pd
df = pd.read_csv('/content/ESSSakk.Book1.csv')
display(df)

df1 = pd.read_csv('/content/ESakk.Book1.csv')
display(df1)

import pandas as pd
a = pd.merge(df,df1)
print(a)

#sort record in descending order
import pandas as pd
df.sort_values(by=['SGPA'], ascending = False)

import matplotlib.pyplot as plt
import numpy as np

plt.style.use('_mpl-gallery-nogrid')

# make data: correlated + noise
np.random.seed(1)
x = np.random.randn(5000)
y = 1.2 * x + np.random.randn(5000) / 3

# plot:
fig, ax = plt.subplots()

ax.hexbin(x, y, gridsize=20)

ax.set(xlim=(-2, 2), ylim=(-3, 3))

plt.show()

import pandas as pd
df1 = pd.read_csv('/content/studentData paresh.csv')

# groupby in python
a = df1.groupby('Name')['Rollno'].count()==2
b = df1.groupby('Name')['Rollno'].head()
print(a)
print(b)

importimport pandas as pd
import matplotlib.pyplot as plt

def process_data(essak):
    df1 = pd.read_csv('/content/studentData paresh.csv')


    count_per_name = df1.groupby('Name')['Rollno'].count() == 2

    head_per_name = df1.groupby('Name')['Rollno'].head()


    plt.figure(figsize=(8, 5))
    plt.bar(count_per_name.index, count_per_name.values)
    plt.xlabel('Name')
    plt.ylabel('Count')
    plt.title('Count of Names with Two Roll Numbers')
    plt.xticks(rotation=45)
    plt.show()

import
file_path = '/content/studentData paresh.csv'

process_data(file_path)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
#isna indicate missing values
# Dropna drop missing values
#read data set

df1 = pd.read_csv('/content/test.csv')
a = df1.head()

#data Preprocessing

x = df1.iloc[:,:-1]
y = df1.iloygraph

#splitting dataset

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 1/3, random_state=0)
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_train, y_train)
y_pred = regressor.predict(x_test)
ygraphygraph
y_test
plt.scatter (x_train, y_train, color='red') # plotting the observation line plt.plot(x_train, regressor.predict(x_train), color="blue") # plotting the regression line
plt.title("X vs Y") # stating the title of the graph plt.xlabel("Years of experience") # adding the name of x-axis
plt.ylabel("Y") # adding the name of y-axis
plt.show() # specifies end of graph

import csv
import matplotlib.pyplot as plt
with open('/content/test.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    data = list(reader)
def fun(i,j):
  for row in data:
    print(row)
i = 0
while i < len(data):
    print(data[i])
    i += 1
groups = []
for i in range(10):
    group = []
    for j in range(len(data)):
        if i == j%5:
            group.append(data[j])
    groups.append(group)
for group in groups:
    print(group)
for i in range(10):
    plt.plot([x[0] for x in groups[i]], [x[1] for x in groups[i]])
    plt.title("Group {i}")
    plt.show()
fun(i,j)

import numpy as np import pandas as pd

matplotlib.pyplot as plt

import #read data set

df1 = pd.read_csv('/content/test.csv = df1.head()

#data Preprocessing x = df1.iloc[:,:-1]

y = df1.iloc[:,1]

#splitting dataset from sklearn.model_selection import tra

x_train, x_test, y_train, y_test trai from sklearn.linear_model import Linear

regressor Linear Regression() regressor.fit(x_train, y_train) y_pred regressor.predict(x_test)

y_pred y_test

plt.scatter (x_train, y_train, color='re plt.plot(x_train, regressor.predict(x_t

plt.title("Salary vs Experience (Traini plt.xlabel("Years of experience") # add plt.ylabel("Salaries") # adding the nam plt.show() # specifies end of graph